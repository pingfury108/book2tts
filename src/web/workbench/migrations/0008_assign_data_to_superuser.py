# Generated by Django 5.1.2 on 2025-04-16 18:22

from django.db import migrations
from django.contrib.auth import get_user_model

def assign_data_to_superuser(apps, schema_editor):
    # Get models
    Books = apps.get_model('workbench', 'Books')
    AudioSegment = apps.get_model('workbench', 'AudioSegment')
    User = apps.get_model('auth', 'User')  # Use the historical User model
    
    # Get a superuser (create one if none exists)
    superuser = None
    superusers = User.objects.filter(is_superuser=True)
    
    if superusers.exists():
        superuser = superusers.first()
    else:
        # Create a superuser using the historical model
        username = 'admin'
        email = 'admin@example.com'
        password = 'admin'
        
        superuser = User.objects.create(
            username=username,
            email=email,
            is_superuser=True,
            is_staff=True
        )
        superuser.set_password(password)
        superuser.save()
        print(f"Created superuser '{username}' with password '{password}'")
    
    # Assign all existing Books to the superuser
    books_updated = 0
    for book in Books.objects.all():
        if book.user_id is None:
            book.user = superuser
            book.save()
            books_updated += 1
    
    # Assign all existing AudioSegments to the superuser
    segments_updated = 0
    for segment in AudioSegment.objects.all():
        if segment.user_id is None:
            segment.user = superuser
            segment.save()
            segments_updated += 1
    
    print(f"Migration complete: Assigned {books_updated} books and {segments_updated} audio segments to superuser '{superuser.username}'")

def reverse_migration(apps, schema_editor):
    # No reverse migration needed
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('workbench', '0007_remove_audiosegment_uid_remove_books_uid_and_more'),
    ]

    operations = [
        migrations.RunPython(assign_data_to_superuser, reverse_migration),
    ]
